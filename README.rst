img2gb - Converts Images to GameBoy Tileset
===========================================

|Build Status| |PYPI Version| |License|

.. image:: ./banner.png


Dependencies
------------

* Python 2.7 / 3.5
* Pillow


Install
-------

From Sources
~~~~~~~~~~~~

Clone this repository::

    git clone https://github.com/flozz/img2gb.git

Go the the project repository::

    cd img2gb

Then install the software (as root)::

    python setup.py install


From PYPI
~~~~~~~~~

Run the following command (as root)::

    pip install img2gb


Windows Binary
~~~~~~~~~~~~~~

Download the latest ``img2gb.exe`` binary here:

* https://github.com/flozz/img2gb/releases

and use it from command line::

    img2gb.exe -h


Usage
-----

img2gb tileset
~~~~~~~~~~~~~~

::

    usage: img2gb tileset [-h] [-c FILE] [-H FILE] [-i FILE] [-d] [-a] [-n NAME]
                          image [image ...]

    positional arguments:
      image                 input image file

    optional arguments:
      -h, --help            show this help message and exit
      -c FILE, --output-c-file FILE
                            output C file
      -H FILE, --output-header-file FILE
                            output C header file
      -i FILE, --output-image FILE
                            output image file representing the tileset (required
                            to generate a tilemap)
      -d, --deduplicate     remove duplicated tiles from the tileset
      -a, --alternative-palette
                            invert the colors to allow tiles to be used with the
                            sprites alternative palette
      -s, --sprite8x16      Rearrange the tiles to be used in 8x16 sprites
      -n NAME, --name NAME  name of the tileset (used for variable names in
                            generated code, default=TILESET)

img2gb tilemap
~~~~~~~~~~~~~~

::

    usage: img2gb tilemap [-h] [-c FILE] [-H FILE] [-o OFFSET]
                      [-m {error,replace}] [-r TILE_ID] [-n NAME]
                      tileset tilemap

    positional arguments:
      tileset               the tileset (generated by img2gb tileset -i)
      tilemap               an image representing the tilemap

    optional arguments:
      -h, --help            show this help message and exit
      -c FILE, --output-c-file FILE
                            output C file
      -H FILE, --output-header-file FILE
                            output C header file
      -o OFFSET, --offset OFFSET
                            offset of the tileset in the video memory (default =
                            0)
      -m {error,replace}, --missing {error,replace}
                            action to do when a tile of the tilemap is missing
                            from the tileset (default = error)
      -r TILE_ID, --replace TILE_ID
                            replace missing tiles by the given one when
                            --missing=replace
      -n NAME, --name NAME  name of the tileset (used for variable names in
                            generated code, default=TILEMAP)


Example Generated Code
----------------------

**Input file (img.png):**

.. image:: ./img.png


**Commands to generate tileset and tilemap**::

    img2gb tileset --dedup -c example/tileset.c -H example/tileset.h -i example/tileset.png img.png
    img2gb tilemap -c example/tilemap.c -H example/tilemap.h example/tileset.png img.png


**Generated example/tileset.h**::

    // This file was generated by img2gb, DO NOT EDIT

    #ifndef _TILESET_H
    #define _TILESET_H

    extern const UINT8 TILESET[];
    #define TILESET_TILE_COUNT 97


    #endif

**Generated example/tileset.c (trucated)**::

    // This file was generated by img2gb, DO NOT EDIT

    #include <types.h>

    const UINT8 TILESET[] = {
        0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,  // ...
    };

**Generated example/tileset.png:**

.. image:: ./example/tileset.png

**Generated example/tilemap.h**::

    // This file was generated by img2gb, DO NOT EDIT

    #ifndef _TILEMAP_H
    #define _TILEMAP_H

    extern const UINT8 TILEMAP[];
    #define TILEMAP_WIDTH 20
    #define TILEMAP_HEIGHT 18


    #endif

**Generated example/tilemap.c (truncated)**::

    // This file was generated by img2gb, DO NOT EDIT

    #include <types.h>

    const UINT8 TILEMAP[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,  // ...
    };


Links
-----

* Article about the tile encoding and img2gb: https://blog.flozz.fr/2018/11/19/developpement-gameboy-5-creer-des-tilesets/ (French)


Changelog
---------

* **0.10.0:** Adds non-RGB image support (indexed images,...)
* **0.9.1:** Fixes an issue with Python 3
* **0.9.0:** Initial release (generates tiles, tilesets and tilemaps)


.. |Build Status| image:: https://travis-ci.org/flozz/img2gb.svg?branch=master
   :target: https://travis-ci.org/flozz/img2gb
.. |PYPI Version| image:: https://img.shields.io/pypi/v/img2gb.svg
   :target: https://pypi.python.org/pypi/img2gb
.. |License| image:: https://img.shields.io/pypi/l/img2gb.svg
   :target: https://github.com/flozz/img2gb/blob/master/LICENSE
